{"version":3,"sources":["utils.js","AgGrid.tsx","index.tsx"],"names":["deepMap","obj","fn","deepMapper","val","Array","isArray","map","Object","keys","reduce","res","key","mapObject","hex","c","s","i","parseInt","isNaN","Math","round","min","max","charAt","trim","substring","convertToRGB","color","onlyUnique","value","index","self","indexOf","RefreshTimeStatusBarComponent","_classCallCheck","params","eGui","eUpdateTime","_createClass","this","document","createElement","className","label","innerText","appendChild","time","Date","toTimeString","slice","AgGrid","_StreamlitComponentBa","_inherits","_super","_createSuper","props","_this$props$args$grid","_this","_this2","call","frameDtypes","api","columnApi","columnFormaters","manualUpdateRequested","clearSelectedRowsButton","allowUnsafeJsCode","gridOptions","gradientLowValueColour","gradientHighValueColour","allValuesInTable","valuesForTableOrdered","wsUrl","rowIdCol","gridContainerRef","isGridAutoHeightOn","convertJavascriptCodeOnGridOptions","convertStringToFunction","render","undefined","state","should_update","setRowData","rowData","loadColumnsState","_jsxs","id","args","theme","ref","style","defineContainerHeight","children","_jsx","ManualUpdateButton","manual_update","onClick","e","returnGridValue","AgGridReact","onGridReady","ClearRowSelectionButton","clear_row_selection","deselectAll","ModuleRegistry","register","ClientSideRowModelModule","CsvExportModule","custom_css","css","styles","selector","prop","push","join","getCSS","styleSheet","type","console","log","head","addCustomCSS","enable_enterprise_modules","registerModules","ExcelExportModule","GridChartsModule","SparklinesModule","ColumnsToolPanelModule","FiltersToolPanelModule","MasterDetailModule","MenuModule","RangeSelectionModule","RichSelectModule","RowGroupingModule","SetFilterModule","MultiFilterModule","SideBarModule","StatusBarModule","ClipboardModule","LicenseManager","setLicenseKey","frame_dtypes","clear_selected_rows_button","allow_unsafe_jscode","websocket_connection_string","row_id_col","React","createRef","domLayout","JSON","parse","row_data","gridHeight","height","initialiseValuesRequiredForConditionalFormatting","columnTypes","dateColumnFilter","filter","filterParams","comparator","filterValue","cellValue","compareAsc","parseISO","numberColumnFilter","shortDateTimeFormat","valueFormatter","dateFormatter","customDateTimeFormat","column","colDef","custom_format_string","customNumericFormat","_params$column$colDef","numberFormatter","precision","_params$column$colDef2","volatilityFormatter","_params$column$colDef3","_params$column$colDef4","currencyFormatter","custom_currency_symbol","timedeltaFormat","duration","humanize","cellStyle","conditionalFormattingCellStyle","assign","warn","getRowId","data","statusBar","statusPanels","statusPanel","_this3","columnDefFieldForConditionalFormatting","columnDefs","x","includes","field","forEach","uniquValues","sort","a","b","number","valueIndex","backgroundColor","colorStart","colorEnd","colorCount","rgb","start","end","len","alpha","saida","generateColor","length","v","JS_PLACEHOLDER","match","RegExp","concat","exec","funcStr","Function","_this4","updateEvents","update_on","doReturn","element","addEventListener","debounce","columnsState","columns_state","applyColumnState","applyOrder","WebSocket","onmessage","event","replace","applyTransactionAsync","update","getStatusPanel","updateTime","columns_auto_size_mode","sizeColumnsToFit","autoSizeAllColumns","isoString","formaterString","date","format","_unused","currencySymbol","arguments","n","Number","parseFloat","toFixed","returnData","data_return_mode","forEachLeafNode","row","forEachNodeAfterFilter","group","forEachNodeAfterFilterAndSort","selected","forEachDetailGridInfo","d","_d$api","forEachNode","isSelected","returnValue","originalDtypes","selectedRows","getSelectedRows","selectedItems","getSelectedNodes","_objectSpread","rowIndex","colState","getColumnState","Streamlit","setComponentValue","_this5","idx","attachUpdateEvents","fitColumns","selectIndex","_this$gridContainerRe","renderedGridHeight","current","clientHeight","setFrameHeight","wsUpdate","width","reload_data","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fb2c4a69.chunk.js","sourcesContent":["// stole from https://github.com/andfanilo/streamlit-echarts/blob/master/streamlit_echarts/frontend/src/utils.js Thanks andfanilo\nfunction mapObject(obj, fn) {\n    return Object.keys(obj).reduce((res, key) => {\n        res[key] = fn(obj[key])\n        return res\n    }, {})\n}\n\nfunction deepMap(obj, fn) {\n    const deepMapper = (val) =>\n        val !== null && typeof val === \"object\" ? deepMap(val, fn) : fn(val)\n    if (Array.isArray(obj)) {\n        return obj.map(deepMapper)\n    }\n    if (typeof obj === \"object\") {\n        return mapObject(obj, deepMapper)\n    }\n    return obj\n}\n\nexport default deepMap\n","import {Streamlit, StreamlitComponentBase, withStreamlitConnection,} from \"streamlit-component-lib\"\r\n\r\nimport React, {ReactNode} from \"react\"\r\n\r\nimport {AgGridReact} from \"@ag-grid-community/react\"\r\n\r\nimport {\r\n  ColumnApi,\r\n  DetailGridInfo,\r\n  GetRowIdParams,\r\n  GridApi,\r\n  IStatusPanelComp,\r\n  IStatusPanelParams,\r\n  ModuleRegistry\r\n} from \"@ag-grid-community/core\"\r\n\r\nimport {ClientSideRowModelModule} from \"@ag-grid-community/client-side-row-model\"\r\nimport {LicenseManager} from \"@ag-grid-enterprise/core\"\r\nimport {GridChartsModule} from \"@ag-grid-enterprise/charts\"\r\nimport {SparklinesModule} from \"@ag-grid-enterprise/sparklines\"\r\nimport {ClipboardModule} from \"@ag-grid-enterprise/clipboard\"\r\nimport {CsvExportModule} from \"@ag-grid-community/csv-export\"\r\nimport {ColumnsToolPanelModule} from \"@ag-grid-enterprise/column-tool-panel\"\r\nimport {ExcelExportModule} from \"@ag-grid-enterprise/excel-export\"\r\nimport {FiltersToolPanelModule} from \"@ag-grid-enterprise/filter-tool-panel\"\r\nimport {MasterDetailModule} from \"@ag-grid-enterprise/master-detail\"\r\nimport {MenuModule} from \"@ag-grid-enterprise/menu\"\r\nimport {RangeSelectionModule} from \"@ag-grid-enterprise/range-selection\"\r\nimport {RichSelectModule} from \"@ag-grid-enterprise/rich-select\"\r\nimport {RowGroupingModule} from \"@ag-grid-enterprise/row-grouping\"\r\nimport {SetFilterModule} from \"@ag-grid-enterprise/set-filter\"\r\nimport {MultiFilterModule} from \"@ag-grid-enterprise/multi-filter\"\r\nimport {SideBarModule} from \"@ag-grid-enterprise/side-bar\"\r\nimport {StatusBarModule} from \"@ag-grid-enterprise/status-bar\"\r\n\r\nimport {compareAsc, parseISO} from \"date-fns\"\r\nimport {format} from \"date-fns-tz\"\r\nimport deepMap from \"./utils\"\r\nimport {duration} from \"moment\"\r\n\r\nimport {debounce} from \"lodash\"\r\n\r\nimport \"./AgGrid.scss\"\r\nimport \"./scrollbar.css\"\r\n\r\ninterface State {\r\n  rowData: any\r\n  gridHeight: number\r\n  should_update: boolean\r\n}\r\n\r\ntype CSSDict = { [key: string]: { [key: string]: string } }\r\n\r\nfunction getCSS(styles: CSSDict): string {\r\n  var css = []\r\n  for (let selector in styles) {\r\n    let style = selector + \" {\"\r\n\r\n    for (let prop in styles[selector]) {\r\n      style += prop + \": \" + styles[selector][prop] + \";\"\r\n    }\r\n\r\n    style += \"}\"\r\n\r\n    css.push(style)\r\n  }\r\n\r\n  return css.join(\"\\n\")\r\n}\r\n\r\nfunction addCustomCSS(custom_css: CSSDict): void {\r\n  var css = getCSS(custom_css)\r\n  var styleSheet = document.createElement(\"style\")\r\n  styleSheet.type = \"text/css\"\r\n  styleSheet.innerText = css\r\n  console.log(`Adding cutom css: `, css)\r\n  document.head.appendChild(styleSheet)\r\n}\r\n\r\nfunction hex(c: any) {\r\n  var s = '0123456789abcdef';\r\n  var i = parseInt(c);\r\n  if (isNaN(c) || i === 0) return '00';\r\n  i = Math.round(Math.min(Math.max(0, i), 255));\r\n  return s.charAt((i - (i % 16)) / 16) + s.charAt(i % 16);\r\n}\r\n\r\n/* Convert an RGB triplet to a hex string */\r\nfunction convertToHex(rgb: any) {\r\n  return hex(rgb[0]) + hex(rgb[1]) + hex(rgb[2]);\r\n}\r\n\r\n/* Remove '#' in color hex string */\r\nfunction trim(s: string) {\r\n  return s.charAt(0) === '#' ? s.substring(1, 7) : s;\r\n}\r\n\r\n/* Convert a hex string to an RGB triplet */\r\nfunction convertToRGB(hex: string) {\r\n  var color = [];\r\n  color[0] = parseInt(trim(hex).substring(0, 2), 16);\r\n  color[1] = parseInt(trim(hex).substring(2, 4), 16);\r\n  color[2] = parseInt(trim(hex).substring(4, 6), 16);\r\n  return color;\r\n}\r\n\r\nfunction generateColor(colorStart: string, colorEnd: string, colorCount: number, index: number) {\r\n  // The beginning of your gradient\r\n  var start = convertToRGB(colorStart);\r\n\r\n  // The end of your gradient\r\n  var end = convertToRGB(colorEnd);\r\n\r\n  // The number of colors to compute\r\n  var len = colorCount;\r\n\r\n  //Alpha blending amount\r\n  var alpha = 0.0;\r\n\r\n  var saida = [];\r\n\r\n  let i;\r\n  for (i = 0; i < len; i++) {\r\n    var c = [];\r\n    alpha += 1.0 / len;\r\n\r\n    c[0] = start[0] * alpha + (1 - alpha) * end[0];\r\n    c[1] = start[1] * alpha + (1 - alpha) * end[1];\r\n    c[2] = start[2] * alpha + (1 - alpha) * end[2];\r\n\r\n    saida.push(convertToHex(c));\r\n  }\r\n\r\n  return saida[index];\r\n}\r\n\r\nfunction onlyUnique(value: any, index: any, self: any) {\r\n  if (value !== 'nan') {\r\n    return self.indexOf(value) === index;\r\n  }\r\n}\r\n\r\n\r\nexport class RefreshTimeStatusBarComponent implements IStatusPanelComp {\r\n  params!: IStatusPanelParams;\r\n  eGui!: HTMLDivElement;\r\n  eUpdateTime!: HTMLSpanElement;\r\n\r\n  init(params: IStatusPanelParams) {\r\n    this.params = params;\r\n\r\n    this.eGui = document.createElement('div');\r\n    this.eGui.className = 'ag-status-name-value';\r\n\r\n    var label = document.createElement('span');\r\n    label.innerText = 'Last Refresh Time: ';\r\n    this.eGui.appendChild(label);\r\n\r\n    this.eUpdateTime = document.createElement('span');\r\n    this.eUpdateTime.className = 'ag-status-name-value-value';\r\n\r\n    this.eGui.appendChild(this.eUpdateTime);\r\n\r\n  }\r\n\r\n  getGui() {\r\n    return this.eGui;\r\n  }\r\n\r\n  destroy() {\r\n  }\r\n\r\n  updateTime() {\r\n    var today = new Date();\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString\r\n    var time=today.toTimeString().slice(0,8)\r\n    this.eUpdateTime.innerText = time + '';\r\n  }\r\n}\r\n\r\nclass AgGrid extends StreamlitComponentBase<State> {\r\n  private frameDtypes: any\r\n  private api!: GridApi\r\n  private columnApi!: ColumnApi\r\n  private columnFormaters: any\r\n  private manualUpdateRequested: boolean = false\r\n  private clearSelectedRowsButton: boolean = false\r\n  private allowUnsafeJsCode: boolean = false\r\n  private gridOptions: any\r\n  private gradientLowValueColour = '#FF0000'\r\n  private gradientHighValueColour = '#00FF00'\r\n  private allValuesInTable: number[] = []\r\n  private valuesForTableOrdered: number[] = []\r\n  private wsUrl: string\r\n  private rowIdCol: string\r\n  private gridContainerRef: React.RefObject<HTMLDivElement>\r\n  private isGridAutoHeightOn: boolean\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n    ModuleRegistry.register(ClientSideRowModelModule)\r\n    ModuleRegistry.register(CsvExportModule)\r\n\r\n    if (props.args.custom_css) {\r\n      addCustomCSS(props.args.custom_css)\r\n    }\r\n\r\n    if (props.args.enable_enterprise_modules) {\r\n      ModuleRegistry.registerModules([\r\n        ExcelExportModule,\r\n        GridChartsModule,\r\n        SparklinesModule,\r\n        ColumnsToolPanelModule,\r\n        FiltersToolPanelModule,\r\n        MasterDetailModule,\r\n        MenuModule,\r\n        RangeSelectionModule,\r\n        RichSelectModule,\r\n        RowGroupingModule,\r\n        SetFilterModule,\r\n        MultiFilterModule,\r\n        SideBarModule,\r\n        StatusBarModule,\r\n        ClipboardModule,\r\n      ])\r\n      if (\"license_key\" in props.args) {\r\n        LicenseManager.setLicenseKey(props.args[\"license_key\"])\r\n      }\r\n    }\r\n\r\n    this.frameDtypes = this.props.args.frame_dtypes\r\n    this.manualUpdateRequested = this.props.args.manual_update === 1\r\n    this.clearSelectedRowsButton = this.props.args.clear_selected_rows_button\r\n    this.allowUnsafeJsCode = this.props.args.allow_unsafe_jscode\r\n    this.wsUrl = this.props.args.websocket_connection_string\r\n    this.rowIdCol = this.props.args.row_id_col\r\n    this.gridContainerRef = React.createRef();\r\n    this.isGridAutoHeightOn = this.props.args.gridOptions?.domLayout === \"autoHeight\"\r\n\r\n    this.state = {\r\n      rowData: JSON.parse(props.args.row_data),\r\n      gridHeight: this.props.args.height,\r\n      should_update: false,\r\n    }\r\n\r\n    this.initialiseValuesRequiredForConditionalFormatting(this.props.args.gridOptions, this.state.rowData)\r\n\r\n    this.columnFormaters = {\r\n      columnTypes: {\r\n        dateColumnFilter: {\r\n          filter: \"agDateColumnFilter\",\r\n          filterParams: {\r\n            comparator: (filterValue: any, cellValue: string) =>\r\n              compareAsc(parseISO(cellValue), filterValue),\r\n          },\r\n        },\r\n        numberColumnFilter: {\r\n          filter: \"agNumberColumnFilter\",\r\n        },\r\n        shortDateTimeFormat: {\r\n          valueFormatter: (params: any) =>\r\n            this.dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n        },\r\n        'customDateFormat': {\r\n          valueFormatter: (params: any) =>\r\n              this.dateFormatter(params.value, \"yyyy-MM-dd\"),\r\n        },\r\n        customDateTimeFormat: {\r\n          valueFormatter: (params: any) =>\r\n            this.dateFormatter(\r\n              params.value,\r\n              params.column.colDef.custom_format_string\r\n            ),\r\n        },\r\n        customNumericFormat: {\r\n          valueFormatter: (params: any) =>\r\n            this.numberFormatter(\r\n              params.value,\r\n              params.column.colDef.precision ?? 2\r\n            ),\r\n        },\r\n        'customVolatilityFormat': {\r\n          valueFormatter: (params: any) => this.volatilityFormatter(params.value, params.column.colDef.precision ?? 1),\r\n        },\r\n        'customCurrencyFormat': {\r\n          valueFormatter: (params: any) =>\r\n              this.currencyFormatter(\r\n                  params.value,\r\n                  params.column.colDef.custom_currency_symbol ?? '$',\r\n                  params.column.colDef.precision ?? 0\r\n              ),\r\n        },\r\n        timedeltaFormat: {\r\n          valueFormatter: (params: any) =>\r\n            duration(params.value).humanize(true),\r\n        },\r\n        'conditionalFormat': {\r\n          cellStyle: (params: any) => this.conditionalFormattingCellStyle(params.value, this.valuesForTableOrdered)\r\n        },\r\n      }\r\n    }\r\n\r\n    let gridOptions = Object.assign(\r\n        {},\r\n        this.columnFormaters,\r\n        this.props.args.gridOptions\r\n    )\r\n\r\n    if (this.allowUnsafeJsCode) {\r\n      console.warn(\"flag allow_unsafe_jscode is on.\")\r\n      gridOptions = this.convertJavascriptCodeOnGridOptions(gridOptions)\r\n    }\r\n    if (this.rowIdCol !== null) {\r\n      gridOptions.getRowId = (params: GetRowIdParams) => {\r\n        // console.log(this.rowIdCol)\r\n        // console.log(params.data)\r\n        // console.log(params.data[this.rowIdCol])\r\n        // console.log(params.data.ExpirationDate)\r\n        return params.data[this.rowIdCol];\r\n      }\r\n\r\n    }\r\n\r\n    if (this.wsUrl !== null) {\r\n\r\n      gridOptions.statusBar = {\r\n        statusPanels: [\r\n          {\r\n            statusPanel: RefreshTimeStatusBarComponent,\r\n            key: 'refreshTimeCompKey',\r\n          },\r\n        ],\r\n      }\r\n    }\r\n    this.gridOptions = gridOptions\r\n  }\r\n\r\n\r\n  private initialiseValuesRequiredForConditionalFormatting(gridOptions: any, rowData: any) {\r\n    const columnDefs = gridOptions.columnDefs;\r\n    // console.log(columnDefs)\r\n    const columnDefFieldForConditionalFormatting = columnDefs\r\n        // .filter((x:any) => x.cellStyle?.name === 'conditionalFormattingCellStyle')\r\n        // .filter((x:any) =>  x.conditional_formatting_group === 'group1')\r\n        .filter((x: any) => x.type.includes('conditionalFormat'))\r\n        .map((x: any) => {\r\n          if (x.field) {\r\n            return x.field;\r\n          }\r\n        });\r\n    // console.log(columnDefFieldForConditionalFormatting)\r\n    rowData.forEach((x: any) => {\r\n      columnDefFieldForConditionalFormatting.forEach((field: any) => {\r\n        this.allValuesInTable.push(x[field]);\r\n      })\r\n    });\r\n    // console.log(this.allValuesInTable)\r\n    // const uniquValues = [...new Set(this.allValuesInTable)];\r\n    const uniquValues = this.allValuesInTable.filter(onlyUnique)//.filter((x:any)=>x!=='nan');\r\n\r\n    this.valuesForTableOrdered = uniquValues.sort(function (a, b) {\r\n      return a - b;\r\n    });\r\n    // console.log(this.valuesForTableOrdered)\r\n  }\r\n\r\n  private conditionalFormattingCellStyle(number: any, valuesForTableOrdered: any) {\r\n    // the index, or how far along the value is in the gradient\r\n    const valueIndex = valuesForTableOrdered.indexOf(number);\r\n    // get the colour for the cell, depending on its index\r\n    const bgColour = generateColor(\r\n        this.gradientHighValueColour,\r\n        this.gradientLowValueColour,\r\n        this.valuesForTableOrdered.length,\r\n        valueIndex\r\n    );\r\n\r\n    return {backgroundColor: '#' + bgColour};\r\n  }\r\n\r\n  static getDerivedStateFromProps(props: any, state: any) {\r\n    if (props.args.reload_data) {\r\n      let new_row_data = JSON.parse(props.args.row_data)\r\n\r\n      return {\r\n        rowData: new_row_data,\r\n        gridHeight: props.args.height,\r\n        should_update: true,\r\n      }\r\n    } else {\r\n      return {\r\n        gridHeight: props.args.height,\r\n      }\r\n    }\r\n  }\r\n\r\n  private convertStringToFunction(v: string) {\r\n    const JS_PLACEHOLDER = \"--x_x--0_0--\"\r\n\r\n    let funcReg = new RegExp(\r\n      `${JS_PLACEHOLDER}\\\\s*((function|class)\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\r\n    )\r\n\r\n    let match = funcReg.exec(v)\r\n\r\n    if (match) {\r\n      const funcStr = match[1]\r\n      // eslint-disable-next-line\r\n      return new Function(\"return \" + funcStr)()\r\n    } else {\r\n      return v\r\n    }\r\n  }\r\n\r\n  private convertJavascriptCodeOnGridOptions = (obj: object) => {\r\n    return deepMap(obj, this.convertStringToFunction)\r\n  }\r\n\r\n  private attachUpdateEvents(api: GridApi) {\r\n    let updateEvents = this.props.args.update_on[0]\r\n    const doReturn = (e: any) => this.returnGridValue(e)\r\n\r\n    updateEvents.forEach((element: any) => {\r\n      if (Array.isArray(element)) {\r\n        api.addEventListener(element[0], debounce(doReturn, element[1]))\r\n        console.log(\"Attached arr\", element)\r\n      } else {\r\n        api.addEventListener(element, doReturn)\r\n      }\r\n    })\r\n  }\r\n\r\n  private loadColumnsState() {\r\n    const columnsState = this.props.args.columns_state\r\n\r\n    if (columnsState != null) {\r\n      //console.dir(columnsState)\r\n      this.columnApi.applyColumnState({state: columnsState, applyOrder: true})\r\n    }\r\n  }\r\n\r\n  public render = (): ReactNode => {\r\n    if (this.api !== undefined) {\r\n      if (this.state.should_update) {\r\n        this.api.setRowData(this.state.rowData)\r\n      }\r\n    }\r\n    this.loadColumnsState()\r\n\r\n\r\n    return (\r\n        <div\r\n            id=\"gridContainer\"\r\n            className={\"ag-theme-\" + this.props.args.theme}\r\n            ref={this.gridContainerRef}\r\n            style={this.defineContainerHeight()}\r\n        >\r\n          <this.ManualUpdateButton\r\n              manual_update={this.manualUpdateRequested}\r\n              onClick={(e: any) => this.returnGridValue(e)}\r\n          />\r\n          <AgGridReact\r\n              onGridReady={(e) => this.onGridReady(e)}\r\n              gridOptions={this.gridOptions}\r\n          ></AgGridReact>\r\n          <this.ClearRowSelectionButton\r\n              clear_row_selection={this.clearSelectedRowsButton}\r\n              onClick={(e: any) => this.api.deselectAll()}\r\n          />\r\n        </div>\r\n    )\r\n  }\r\n\r\n  private wsUpdate(api: any) {\r\n    let ws = new WebSocket(this.wsUrl);\r\n    ws.onmessage = function (event) {\r\n      let data = JSON.parse(event.data.replace(/\\bNaN\\b/g, \"null\"))\r\n      // console.log(data)\r\n      api.applyTransactionAsync({update: data})\r\n      const updateTimeComponent = api!.getStatusPanel('refreshTimeCompKey') as any;\r\n      updateTimeComponent.updateTime();\r\n    }\r\n  }\r\n\r\n  private fitColumns() {\r\n    const columns_auto_size_mode = this.props.args.columns_auto_size_mode\r\n\r\n    switch (columns_auto_size_mode) {\r\n      case 1:\r\n      case \"FIT_ALL_COLUMNS_TO_VIEW\":\r\n        this.api.sizeColumnsToFit()\r\n        break\r\n\r\n      case 2:\r\n      case \"FIT_CONTENTS\":\r\n        this.columnApi.autoSizeAllColumns()\r\n        break\r\n\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  private dateFormatter(isoString: string, formaterString: string): String {\r\n    try {\r\n      let date = parseISO(isoString)\r\n      return format(date, formaterString)\r\n    } catch {\r\n      return isoString\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  private currencyFormatter(number: any, currencySymbol: string, precision: number = 0): String {\r\n    let n = Number.parseFloat(number)\r\n    if (!Number.isNaN(n)) {\r\n      return currencySymbol + n.toFixed(precision).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n    } else {\r\n      return number\r\n    }\r\n  }\r\n\r\n  private numberFormatter(number: any, precision: number): String {\r\n    let n = Number.parseFloat(number)\r\n    if (!Number.isNaN(n)) {\r\n      return n.toFixed(precision)\r\n    } else {\r\n      return number\r\n    }\r\n  }\r\n\r\n  private volatilityFormatter(number: any, precision: number): String {\r\n    let n = Number.parseFloat(number)\r\n    if (!Number.isNaN(n)) {\r\n      return (n * 100).toFixed(precision) + '%'\r\n    } else {\r\n      return number\r\n    }\r\n  }\r\n\r\n  private returnGridValue(e: any) {\r\n    let returnData: any[] = []\r\n    let returnMode = this.props.args.data_return_mode\r\n\r\n    switch (returnMode) {\r\n      case 0: //ALL_DATA\r\n        this.api.forEachLeafNode((row) => returnData.push(row.data))\r\n        break\r\n\r\n      case 1: //FILTERED_DATA\r\n        this.api.forEachNodeAfterFilter((row) => {\r\n          if (!row.group) {\r\n            returnData.push(row.data)\r\n          }\r\n        })\r\n        break\r\n\r\n      case 2: //FILTERED_SORTED_DATA\r\n        this.api.forEachNodeAfterFilterAndSort((row) => {\r\n          if (!row.group) {\r\n            returnData.push(row.data)\r\n          }\r\n        })\r\n        break\r\n    }\r\n\r\n      let selected : any  = {}\r\n      this.api.forEachDetailGridInfo((d:DetailGridInfo) => {\r\n        selected[d.id] = []\r\n        d.api?.forEachNode((n: any) => {\r\n          if (n.isSelected()) {\r\n            selected[d.id].push(n)\r\n          }\r\n        })\r\n      })\r\n\r\n    //console.log(selected)\r\n    let returnValue = {\r\n      originalDtypes: this.frameDtypes,\r\n      rowData: returnData,\r\n      selectedRows: this.api.getSelectedRows(),\r\n      selectedItems: this.api\r\n        .getSelectedNodes()\r\n        .map((n) => ({ rowIndex: n.rowIndex, ...n.data })),\r\n      colState: this.columnApi.getColumnState(),\r\n    }\r\n\r\n    Streamlit.setComponentValue(returnValue)\r\n  }\r\n\r\n  private ManualUpdateButton(props: any) {\r\n    if (props.manual_update) {\r\n      return <button onClick={props.onClick}>Update</button>\r\n    } else {\r\n      return <span></span>\r\n    }\r\n  }\r\n\r\n  private onGridReady(event: any) {\r\n    this.api = event.api\r\n    this.columnApi = event.columnApi\r\n\r\n    this.api.forEachDetailGridInfo((i: any) => {\r\n      console.log(i)\r\n    })\r\n\r\n    this.attachUpdateEvents(this.api)\r\n\r\n    this.api.forEachDetailGridInfo((i: DetailGridInfo) => {\r\n      //console.log(i)\r\n      if (i.api !== undefined) {\r\n        this.attachUpdateEvents(i.api)\r\n      }\r\n    })\r\n\r\n    this.api.addEventListener(\"firstDataRendered\", (e: any) =>\r\n        this.fitColumns()\r\n    )\r\n\r\n    this.api.setRowData(this.state.rowData)\r\n\r\n    for (var idx in this.gridOptions[\"preSelectedRows\"]) {\r\n      this.api.selectIndex(this.gridOptions[\"preSelectedRows\"][idx], true, true)\r\n    }\r\n    if (this.isGridAutoHeightOn) {\r\n      const renderedGridHeight = this.gridContainerRef.current?.clientHeight\r\n      Streamlit.setFrameHeight(renderedGridHeight)\r\n    }\r\n    if (this.wsUrl !== null) {\r\n      // console.log(this.state.rowData)\r\n      this.wsUpdate(this.api)\r\n    }\r\n\r\n  }\r\n\r\n  private defineContainerHeight() {\r\n    if (this.isGridAutoHeightOn) {\r\n      return {\r\n        width: this.props.width,\r\n      }\r\n    } else {\r\n      return {\r\n        width: this.props.width,\r\n        height: this.state.gridHeight,\r\n      }\r\n    }\r\n  }\r\n\r\n  private ClearRowSelectionButton(props: any) {\r\n    if (props.clear_row_selection) {\r\n      return <button onClick={props.onClick}>Clear Row Selection</button>\r\n    } else {\r\n      return <span></span>\r\n    }\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(AgGrid)\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AgGrid from \"./AgGrid\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AgGrid />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}