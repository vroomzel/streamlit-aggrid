{"version":3,"sources":["utils.js","AgGrid.tsx","index.tsx"],"names":["deepMap","obj","fn","deepMapper","val","Array","isArray","map","Object","keys","reduce","res","key","mapObject","hex","c","s","i","parseInt","isNaN","Math","round","min","max","charAt","trim","substring","convertToRGB","color","onlyUnique","value","index","self","indexOf","RefreshTimeStatusBarComponent","params","eGui","eUpdateTime","this","document","createElement","className","label","innerText","appendChild","time","Date","toTimeString","slice","AgGrid","props","frameDtypes","api","columnApi","columnFormaters","manualUpdateRequested","allowUnsafeJsCode","fitColumnsOnGridLoad","gridOptions","gradientLowValueColour","gradientHighValueColour","allValuesInTable","valuesForTableOrdered","wsUrl","rowIdCol","convertJavascriptCodeOnGridOptions","convertStringToFunction","render","undefined","state","should_update","setRowData","rowData","loadColumnsState","args","theme","style","defineContainerHeight","ManualUpdateButton","manual_update","onClick","e","returnGridValue","onGridReady","ModuleRegistry","register","ClientSideRowModelModule","CsvExportModule","custom_css","css","styles","selector","prop","push","join","getCSS","styleSheet","type","console","log","head","addCustomCSS","enable_enterprise_modules","registerModules","ExcelExportModule","GridChartsModule","SparklinesModule","ColumnsToolPanelModule","FiltersToolPanelModule","MasterDetailModule","MenuModule","RangeSelectionModule","RichSelectModule","RowGroupingModule","SetFilterModule","MultiFilterModule","SideBarModule","StatusBarModule","ClipboardModule","LicenseManager","setLicenseKey","frame_dtypes","allow_unsafe_jscode","fit_columns_on_grid_load","websocket_connection_string","row_id_col","JSON","parse","row_data","gridHeight","height","initialiseValuesRequiredForConditionalFormatting","columnTypes","dateColumnFilter","filter","filterParams","comparator","filterValue","cellValue","compareAsc","parseISO","numberColumnFilter","shortDateTimeFormat","valueFormatter","dateFormatter","customDateTimeFormat","column","colDef","custom_format_string","customNumericFormat","numberFormatter","precision","volatilityFormatter","currencyFormatter","custom_currency_symbol","timedeltaFormat","duration","humanize","cellStyle","conditionalFormattingCellStyle","assign","warn","getRowId","data","statusBar","statusPanels","statusPanel","columnDefFieldForConditionalFormatting","columnDefs","x","includes","field","forEach","uniquValues","sort","a","b","number","valueIndex","backgroundColor","colorStart","colorEnd","colorCount","rgb","start","end","len","alpha","saida","generateColor","length","v","JS_PLACEHOLDER","match","RegExp","exec","funcStr","Function","updateEvents","update_on","doReturn","element","addEventListener","debounce","columnsState","columns_state","applyColumnState","applyOrder","event","idx","forEachDetailGridInfo","attachUpdateEvents","fitColumns","selectIndex","wsUpdate","WebSocket","onmessage","replace","applyTransactionAsync","update","getStatusPanel","updateTime","sizeColumnsToFit","autoSizeAllColumns","isoString","formaterString","date","format","currencySymbol","n","Number","parseFloat","toFixed","returnData","data_return_mode","forEachLeafNode","row","forEachNodeAfterFilter","group","forEachNodeAfterFilterAndSort","selected","d","id","forEachNode","isSelected","returnValue","originalDtypes","selectedRows","getSelectedRows","selectedItems","getSelectedNodes","rowIndex","colState","getColumnState","Streamlit","setComponentValue","width","reload_data","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1bcf1371.chunk.js","sourcesContent":["// stole from https://github.com/andfanilo/streamlit-echarts/blob/master/streamlit_echarts/frontend/src/utils.js Thanks andfanilo\nfunction mapObject(obj, fn) {\n    return Object.keys(obj).reduce((res, key) => {\n        res[key] = fn(obj[key])\n        return res\n    }, {})\n}\n\nfunction deepMap(obj, fn) {\n    const deepMapper = (val) =>\n        val !== null && typeof val === \"object\" ? deepMap(val, fn) : fn(val)\n    if (Array.isArray(obj)) {\n        return obj.map(deepMapper)\n    }\n    if (typeof obj === \"object\") {\n        return mapObject(obj, deepMapper)\n    }\n    return obj\n}\n\nexport default deepMap\n","import {Streamlit, StreamlitComponentBase, withStreamlitConnection,} from \"streamlit-component-lib\"\r\n\r\nimport {ReactNode} from \"react\"\r\n\r\nimport {AgGridReact} from \"@ag-grid-community/react\"\r\n\r\nimport {ColumnApi, DetailGridInfo, GetRowIdParams, GridApi, ModuleRegistry} from \"@ag-grid-community/core\"\r\n\r\nimport {ClientSideRowModelModule} from \"@ag-grid-community/client-side-row-model\"\r\nimport {LicenseManager} from \"@ag-grid-enterprise/core\"\r\nimport {GridChartsModule} from \"@ag-grid-enterprise/charts\"\r\nimport {SparklinesModule} from \"@ag-grid-enterprise/sparklines\"\r\nimport {ClipboardModule} from \"@ag-grid-enterprise/clipboard\"\r\nimport {CsvExportModule} from \"@ag-grid-community/csv-export\"\r\nimport {ColumnsToolPanelModule} from \"@ag-grid-enterprise/column-tool-panel\"\r\nimport {ExcelExportModule} from \"@ag-grid-enterprise/excel-export\"\r\nimport {FiltersToolPanelModule} from \"@ag-grid-enterprise/filter-tool-panel\"\r\nimport {MasterDetailModule} from \"@ag-grid-enterprise/master-detail\"\r\nimport {MenuModule} from \"@ag-grid-enterprise/menu\"\r\nimport {RangeSelectionModule} from \"@ag-grid-enterprise/range-selection\"\r\nimport {RichSelectModule} from \"@ag-grid-enterprise/rich-select\"\r\nimport {RowGroupingModule} from \"@ag-grid-enterprise/row-grouping\"\r\nimport {SetFilterModule} from \"@ag-grid-enterprise/set-filter\"\r\nimport {MultiFilterModule} from \"@ag-grid-enterprise/multi-filter\"\r\nimport {SideBarModule} from \"@ag-grid-enterprise/side-bar\"\r\nimport {StatusBarModule} from \"@ag-grid-enterprise/status-bar\"\r\nimport { IStatusPanelComp, IStatusPanelParams } from '@ag-grid-community/core';\r\n\r\nimport {compareAsc, parseISO} from \"date-fns\"\r\nimport {format} from \"date-fns-tz\"\r\nimport deepMap from \"./utils\"\r\nimport {duration} from \"moment\"\r\n\r\nimport {debounce} from \"lodash\"\r\n\r\nimport \"./AgGrid.scss\"\r\nimport \"./scrollbar.css\"\r\n\r\ninterface State {\r\n  rowData: any\r\n  gridHeight: number\r\n  should_update: boolean\r\n}\r\n\r\ntype CSSDict = { [key: string]: { [key: string]: string } }\r\n\r\nfunction getCSS(styles: CSSDict): string {\r\n  var css = []\r\n  for (let selector in styles) {\r\n    let style = selector + \" {\"\r\n\r\n    for (let prop in styles[selector]) {\r\n      style += prop + \": \" + styles[selector][prop] + \";\"\r\n    }\r\n\r\n    style += \"}\"\r\n\r\n    css.push(style)\r\n  }\r\n\r\n  return css.join(\"\\n\")\r\n}\r\n\r\nfunction addCustomCSS(custom_css: CSSDict): void {\r\n  var css = getCSS(custom_css)\r\n  var styleSheet = document.createElement(\"style\")\r\n  styleSheet.type = \"text/css\"\r\n  styleSheet.innerText = css\r\n  console.log(`Adding cutom css: `, css)\r\n  document.head.appendChild(styleSheet)\r\n}\r\n\r\nfunction hex(c: any) {\r\n  var s = '0123456789abcdef';\r\n  var i = parseInt(c);\r\n  if (isNaN(c) || i === 0) return '00';\r\n  i = Math.round(Math.min(Math.max(0, i), 255));\r\n  return s.charAt((i - (i % 16)) / 16) + s.charAt(i % 16);\r\n}\r\n\r\n/* Convert an RGB triplet to a hex string */\r\nfunction convertToHex(rgb: any) {\r\n  return hex(rgb[0]) + hex(rgb[1]) + hex(rgb[2]);\r\n}\r\n\r\n/* Remove '#' in color hex string */\r\nfunction trim(s: string) {\r\n  return s.charAt(0) === '#' ? s.substring(1, 7) : s;\r\n}\r\n\r\n/* Convert a hex string to an RGB triplet */\r\nfunction convertToRGB(hex: string) {\r\n  var color = [];\r\n  color[0] = parseInt(trim(hex).substring(0, 2), 16);\r\n  color[1] = parseInt(trim(hex).substring(2, 4), 16);\r\n  color[2] = parseInt(trim(hex).substring(4, 6), 16);\r\n  return color;\r\n}\r\n\r\nfunction generateColor(colorStart: string, colorEnd: string, colorCount: number, index: number) {\r\n  // The beginning of your gradient\r\n  var start = convertToRGB(colorStart);\r\n\r\n  // The end of your gradient\r\n  var end = convertToRGB(colorEnd);\r\n\r\n  // The number of colors to compute\r\n  var len = colorCount;\r\n\r\n  //Alpha blending amount\r\n  var alpha = 0.0;\r\n\r\n  var saida = [];\r\n\r\n  let i;\r\n  for (i = 0; i < len; i++) {\r\n    var c = [];\r\n    alpha += 1.0 / len;\r\n\r\n    c[0] = start[0] * alpha + (1 - alpha) * end[0];\r\n    c[1] = start[1] * alpha + (1 - alpha) * end[1];\r\n    c[2] = start[2] * alpha + (1 - alpha) * end[2];\r\n\r\n    saida.push(convertToHex(c));\r\n  }\r\n\r\n  return saida[index];\r\n}\r\n\r\nfunction onlyUnique(value: any, index: any, self: any) {\r\n  if (value !== 'nan') {\r\n    return self.indexOf(value) === index;\r\n  }\r\n}\r\n\r\n\r\nexport class RefreshTimeStatusBarComponent implements IStatusPanelComp {\r\n  params!: IStatusPanelParams;\r\n  eGui!: HTMLDivElement;\r\n  eUpdateTime!: HTMLSpanElement;\r\n\r\n  init(params: IStatusPanelParams) {\r\n    this.params = params;\r\n\r\n    this.eGui = document.createElement('div');\r\n    this.eGui.className = 'ag-status-name-value';\r\n\r\n    var label = document.createElement('span');\r\n    label.innerText = 'Last Refresh Time: ';\r\n    this.eGui.appendChild(label);\r\n\r\n    this.eUpdateTime = document.createElement('span');\r\n    this.eUpdateTime.className = 'ag-status-name-value-value';\r\n\r\n    this.eGui.appendChild(this.eUpdateTime);\r\n\r\n  }\r\n\r\n  getGui() {\r\n    return this.eGui;\r\n  }\r\n\r\n  destroy() {\r\n  }\r\n\r\n  updateTime() {\r\n    var today = new Date();\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString\r\n    var time=today.toTimeString().slice(0,8)\r\n    this.eUpdateTime.innerText = time + '';\r\n  }\r\n}\r\n\r\nclass AgGrid extends StreamlitComponentBase<State> {\r\n  private frameDtypes: any\r\n  private api!: GridApi\r\n  private columnApi!: ColumnApi\r\n  private columnFormaters: any\r\n  private manualUpdateRequested: boolean = false\r\n  private allowUnsafeJsCode: boolean = false\r\n  private fitColumnsOnGridLoad: boolean = false\r\n  private gridOptions: any\r\n  private gradientLowValueColour = '#FF0000'\r\n  private gradientHighValueColour = '#00FF00'\r\n  private allValuesInTable: number[] = []\r\n  private valuesForTableOrdered: number[] = []\r\n  private wsUrl: string\r\n  private rowIdCol: string\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n    ModuleRegistry.register(ClientSideRowModelModule)\r\n    ModuleRegistry.register(CsvExportModule)\r\n\r\n    if (props.args.custom_css) {\r\n      addCustomCSS(props.args.custom_css)\r\n    }\r\n\r\n    if (props.args.enable_enterprise_modules) {\r\n      ModuleRegistry.registerModules([\r\n        ExcelExportModule,\r\n        GridChartsModule,\r\n        SparklinesModule,\r\n        ColumnsToolPanelModule,\r\n        FiltersToolPanelModule,\r\n        MasterDetailModule,\r\n        MenuModule,\r\n        RangeSelectionModule,\r\n        RichSelectModule,\r\n        RowGroupingModule,\r\n        SetFilterModule,\r\n        MultiFilterModule,\r\n        SideBarModule,\r\n        StatusBarModule,\r\n        ClipboardModule,\r\n      ])\r\n      if (\"license_key\" in props.args) {\r\n        LicenseManager.setLicenseKey(props.args[\"license_key\"])\r\n      }\r\n    }\r\n\r\n    this.frameDtypes = this.props.args.frame_dtypes\r\n    this.manualUpdateRequested = this.props.args.manual_update === 1\r\n    this.allowUnsafeJsCode = this.props.args.allow_unsafe_jscode\r\n    this.fitColumnsOnGridLoad = this.props.args.fit_columns_on_grid_load\r\n    this.wsUrl = this.props.args.websocket_connection_string\r\n    this.rowIdCol = this.props.args.row_id_col\r\n\r\n    this.state = {\r\n      rowData: JSON.parse(props.args.row_data),\r\n      gridHeight: this.props.args.height,\r\n      should_update: false,\r\n    }\r\n\r\n    this.initialiseValuesRequiredForConditionalFormatting(this.props.args.gridOptions, this.state.rowData)\r\n\r\n    this.columnFormaters = {\r\n      columnTypes: {\r\n        dateColumnFilter: {\r\n          filter: \"agDateColumnFilter\",\r\n          filterParams: {\r\n            comparator: (filterValue: any, cellValue: string) =>\r\n              compareAsc(parseISO(cellValue), filterValue),\r\n          },\r\n        },\r\n        numberColumnFilter: {\r\n          filter: \"agNumberColumnFilter\",\r\n        },\r\n        shortDateTimeFormat: {\r\n          valueFormatter: (params: any) =>\r\n            this.dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n        },\r\n        'customDateFormat': {\r\n          valueFormatter: (params: any) =>\r\n              this.dateFormatter(params.value, \"yyyy-MM-dd\"),\r\n        },\r\n        customDateTimeFormat: {\r\n          valueFormatter: (params: any) =>\r\n            this.dateFormatter(\r\n              params.value,\r\n              params.column.colDef.custom_format_string\r\n            ),\r\n        },\r\n        customNumericFormat: {\r\n          valueFormatter: (params: any) =>\r\n            this.numberFormatter(\r\n              params.value,\r\n              params.column.colDef.precision ?? 2\r\n            ),\r\n        },\r\n        'customVolatilityFormat': {\r\n          valueFormatter: (params: any) => this.volatilityFormatter(params.value, params.column.colDef.precision ?? 1),\r\n        },\r\n        'customCurrencyFormat': {\r\n          valueFormatter: (params: any) =>\r\n              this.currencyFormatter(\r\n                  params.value,\r\n                  params.column.colDef.custom_currency_symbol ?? '$',\r\n                  params.column.colDef.precision ?? 0\r\n              ),\r\n        },\r\n        timedeltaFormat: {\r\n          valueFormatter: (params: any) =>\r\n            duration(params.value).humanize(true),\r\n        },\r\n        'conditionalFormat': {\r\n          cellStyle: (params: any) => this.conditionalFormattingCellStyle(params.value, this.valuesForTableOrdered)\r\n        },\r\n      }\r\n    }\r\n\r\n    let gridOptions = Object.assign(\r\n        {},\r\n        this.columnFormaters,\r\n        this.props.args.gridOptions\r\n    )\r\n\r\n    if (this.allowUnsafeJsCode) {\r\n      console.warn(\"flag allow_unsafe_jscode is on.\")\r\n      gridOptions = this.convertJavascriptCodeOnGridOptions(gridOptions)\r\n    }\r\n    if (this.rowIdCol !== null) {\r\n      gridOptions.getRowId = (params: GetRowIdParams) => {\r\n        // console.log(this.rowIdCol)\r\n        // console.log(params.data)\r\n        // console.log(params.data[this.rowIdCol])\r\n        // console.log(params.data.ExpirationDate)\r\n        return params.data[this.rowIdCol];\r\n      }\r\n\r\n    }\r\n\r\n    if (this.wsUrl !== null) {\r\n\r\n      gridOptions.statusBar = {\r\n        statusPanels: [\r\n          {\r\n            statusPanel: RefreshTimeStatusBarComponent,\r\n            key: 'refreshTimeCompKey',\r\n          },\r\n        ],\r\n      }\r\n    }\r\n    this.gridOptions = gridOptions\r\n  }\r\n\r\n\r\n  private initialiseValuesRequiredForConditionalFormatting(gridOptions: any, rowData: any) {\r\n    const columnDefs = gridOptions.columnDefs;\r\n    // console.log(columnDefs)\r\n    const columnDefFieldForConditionalFormatting = columnDefs\r\n        // .filter((x:any) => x.cellStyle?.name === 'conditionalFormattingCellStyle')\r\n        // .filter((x:any) =>  x.conditional_formatting_group === 'group1')\r\n        .filter((x: any) => x.type.includes('conditionalFormat'))\r\n        .map((x: any) => {\r\n          if (x.field) {\r\n            return x.field;\r\n          }\r\n        });\r\n    // console.log(columnDefFieldForConditionalFormatting)\r\n    rowData.forEach((x: any) => {\r\n      columnDefFieldForConditionalFormatting.forEach((field: any) => {\r\n        this.allValuesInTable.push(x[field]);\r\n      })\r\n    });\r\n    // console.log(this.allValuesInTable)\r\n    // const uniquValues = [...new Set(this.allValuesInTable)];\r\n    const uniquValues = this.allValuesInTable.filter(onlyUnique)//.filter((x:any)=>x!=='nan');\r\n\r\n    this.valuesForTableOrdered = uniquValues.sort(function (a, b) {\r\n      return a - b;\r\n    });\r\n    // console.log(this.valuesForTableOrdered)\r\n  }\r\n\r\n  private conditionalFormattingCellStyle(number: any, valuesForTableOrdered: any) {\r\n    // the index, or how far along the value is in the gradient\r\n    const valueIndex = valuesForTableOrdered.indexOf(number);\r\n    // get the colour for the cell, depending on its index\r\n    const bgColour = generateColor(\r\n        this.gradientHighValueColour,\r\n        this.gradientLowValueColour,\r\n        this.valuesForTableOrdered.length,\r\n        valueIndex\r\n    );\r\n\r\n    return {backgroundColor: '#' + bgColour};\r\n  }\r\n\r\n  static getDerivedStateFromProps(props: any, state: any) {\r\n    if (props.args.reload_data) {\r\n      let new_row_data = JSON.parse(props.args.row_data)\r\n\r\n      return {\r\n        rowData: new_row_data,\r\n        gridHeight: props.args.height,\r\n        should_update: true,\r\n      }\r\n    } else {\r\n      return {\r\n        gridHeight: props.args.height,\r\n      }\r\n    }\r\n  }\r\n\r\n  private convertStringToFunction(v: string) {\r\n    const JS_PLACEHOLDER = \"--x_x--0_0--\"\r\n\r\n    let funcReg = new RegExp(\r\n      `${JS_PLACEHOLDER}\\\\s*((function|class)\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\r\n    )\r\n\r\n    let match = funcReg.exec(v)\r\n\r\n    if (match) {\r\n      const funcStr = match[1]\r\n      // eslint-disable-next-line\r\n      return new Function(\"return \" + funcStr)()\r\n    } else {\r\n      return v\r\n    }\r\n  }\r\n\r\n  private convertJavascriptCodeOnGridOptions = (obj: object) => {\r\n    return deepMap(obj, this.convertStringToFunction)\r\n  }\r\n\r\n  private attachUpdateEvents(api: GridApi) {\r\n    let updateEvents = this.props.args.update_on[0]\r\n    const doReturn = (e: any) => this.returnGridValue(e)\r\n\r\n    updateEvents.forEach((element: any) => {\r\n      if (Array.isArray(element)) {\r\n        api.addEventListener(element[0], debounce(doReturn, element[1]))\r\n        console.log(\"Attached arr\", element)\r\n      } else {\r\n        api.addEventListener(element, doReturn)\r\n      }\r\n    })\r\n  }\r\n\r\n  private loadColumnsState() {\r\n    const columnsState = this.props.args.columns_state\r\n\r\n    if (columnsState != null) {\r\n      //console.dir(columnsState)\r\n      this.columnApi.applyColumnState({ state: columnsState, applyOrder: true})\r\n    }\r\n  }\r\n\r\n  private onGridReady(event: any) {\r\n    this.api = event.api\r\n    this.columnApi = event.columnApi\r\n\r\n    this.api.forEachDetailGridInfo((i: any) => {\r\n      console.log(i)\r\n    })\r\n\r\n    this.attachUpdateEvents(this.api)\r\n\r\n    this.api.forEachDetailGridInfo((i: DetailGridInfo) => {\r\n      //console.log(i)\r\n      if (i.api !== undefined) {\r\n      this.attachUpdateEvents(i.api)\r\n      }\r\n    })\r\n\r\n    this.api.addEventListener(\"firstDataRendered\", (e: any) =>\r\n        this.fitColumns()\r\n    )\r\n\r\n    this.api.setRowData(this.state.rowData)\r\n\r\n    for (var idx in this.gridOptions[\"preSelectedRows\"]) {\r\n      this.api.selectIndex(this.gridOptions[\"preSelectedRows\"][idx], true, true)\r\n    }\r\n    if (this.wsUrl !== null) {\r\n      // console.log(this.state.rowData)\r\n      this.wsUpdate(this.api)\r\n    }\r\n\r\n  }\r\n\r\n  private wsUpdate(api: any) {\r\n    let ws = new WebSocket(this.wsUrl);\r\n    ws.onmessage = function (event) {\r\n      let data = JSON.parse(event.data.replace(/\\bNaN\\b/g, \"null\"))\r\n      // console.log(data)\r\n      api.applyTransactionAsync({update: data})\r\n      const updateTimeComponent = api!.getStatusPanel('refreshTimeCompKey') as any;\r\n      updateTimeComponent.updateTime();\r\n    }\r\n  }\r\n\r\n  private fitColumns() {\r\n    if (this.fitColumnsOnGridLoad) {\r\n      this.api.sizeColumnsToFit()\r\n    } else {\r\n      this.columnApi.autoSizeAllColumns()\r\n    }\r\n  }\r\n\r\n  private dateFormatter(isoString: string, formaterString: string): String {\r\n    try {\r\n      let date = parseISO(isoString)\r\n      return format(date, formaterString)\r\n    } catch {\r\n      return isoString\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  private currencyFormatter(number: any, currencySymbol: string, precision: number = 0): String {\r\n    let n = Number.parseFloat(number)\r\n    if (!Number.isNaN(n)) {\r\n      return currencySymbol + n.toFixed(precision).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n    } else {\r\n      return number\r\n    }\r\n  }\r\n\r\n  private numberFormatter(number: any, precision: number): String {\r\n    let n = Number.parseFloat(number)\r\n    if (!Number.isNaN(n)) {\r\n      return n.toFixed(precision)\r\n    } else {\r\n      return number\r\n    }\r\n  }\r\n\r\n  private volatilityFormatter(number: any, precision: number): String {\r\n    let n = Number.parseFloat(number)\r\n    if (!Number.isNaN(n)) {\r\n      return (n * 100).toFixed(precision) + '%'\r\n    } else {\r\n      return number\r\n    }\r\n  }\r\n\r\n  private returnGridValue(e: any) {\r\n    let returnData: any[] = []\r\n    let returnMode = this.props.args.data_return_mode\r\n\r\n    switch (returnMode) {\r\n      case 0: //ALL_DATA\r\n        this.api.forEachLeafNode((row) => returnData.push(row.data))\r\n        break\r\n\r\n      case 1: //FILTERED_DATA\r\n        this.api.forEachNodeAfterFilter((row) => {\r\n          if (!row.group) {\r\n            returnData.push(row.data)\r\n          }\r\n        })\r\n        break\r\n\r\n      case 2: //FILTERED_SORTED_DATA\r\n        this.api.forEachNodeAfterFilterAndSort((row) => {\r\n          if (!row.group) {\r\n            returnData.push(row.data)\r\n          }\r\n        })\r\n        break\r\n    }\r\n\r\n      let selected : any  = {}\r\n      this.api.forEachDetailGridInfo((d:DetailGridInfo) => {\r\n        selected[d.id] = []\r\n        d.api?.forEachNode((n: any) => {\r\n          if (n.isSelected()) {\r\n            selected[d.id].push(n)\r\n          }\r\n        })\r\n      })\r\n\r\n    //console.log(selected)\r\n    let returnValue = {\r\n      originalDtypes: this.frameDtypes,\r\n      rowData: returnData,\r\n      selectedRows: this.api.getSelectedRows(),\r\n      selectedItems: this.api\r\n        .getSelectedNodes()\r\n        .map((n) => ({ rowIndex: n.rowIndex, ...n.data })),\r\n      colState: this.columnApi.getColumnState(),\r\n    }\r\n\r\n    Streamlit.setComponentValue(returnValue)\r\n  }\r\n\r\n  private ManualUpdateButton(props: any) {\r\n    if (props.manual_update) {\r\n      return <button onClick={props.onClick}>Update</button>\r\n    } else {\r\n      return <span></span>\r\n    }\r\n  }\r\n\r\n  private defineContainerHeight() {\r\n    if (\"domLayout\" in this.gridOptions) {\r\n      if (this.gridOptions[\"domLayout\"] === \"autoHeight\") {\r\n        return {\r\n          width: this.props.width,\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      width: this.props.width,\r\n      height: this.state.gridHeight,\r\n    }\r\n  }\r\n\r\n  public render = (): ReactNode => {\r\n    if (this.api !== undefined) {\r\n      if (this.state.should_update) {\r\n        this.api.setRowData(this.state.rowData)\r\n      }\r\n    }\r\n    this.loadColumnsState()\r\n    \r\n\r\n    return (\r\n      <div\r\n        className={\"ag-theme-\" + this.props.args.theme}\r\n        style={this.defineContainerHeight()}\r\n      >\r\n        <this.ManualUpdateButton\r\n          manual_update={this.manualUpdateRequested}\r\n          onClick={(e: any) => this.returnGridValue(e)}\r\n        />\r\n        <AgGridReact\r\n          onGridReady={(e) => this.onGridReady(e)}\r\n          gridOptions={this.gridOptions}\r\n        ></AgGridReact>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(AgGrid)\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AgGrid from \"./AgGrid\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AgGrid />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}