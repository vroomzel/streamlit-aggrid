{"version":3,"sources":["utils.js","AgGrid.tsx","index.tsx"],"names":["deepMap","obj","fn","deepMapper","val","Array","isArray","map","Object","keys","reduce","res","key","mapObject","hex","c","s","i","parseInt","isNaN","Math","round","min","max","charAt","trim","substring","convertToRGB","color","onlyUnique","value","index","self","indexOf","AgGrid","props","frameDtypes","api","columnApi","columnFormaters","manualUpdateRequested","allowUnsafeJsCode","fitColumnsOnGridLoad","gridOptions","gradientLowValueColour","gradientHighValueColour","allValuesInTable","valuesForTableOrdered","wsUrl","rowIdCol","convertJavascriptCodeOnGridOptions","convertStringToFunction","render","undefined","state","should_update","setRowData","rowData","loadColumnsState","className","args","theme","style","defineContainerHeight","ManualUpdateButton","manual_update","onClick","e","returnGridValue","onGridReady","ModuleRegistry","register","ClientSideRowModelModule","custom_css","css","styles","selector","prop","push","join","getCSS","styleSheet","document","createElement","type","innerText","console","log","head","appendChild","addCustomCSS","enable_enterprise_modules","registerModules","ExcelExportModule","GridChartsModule","SparklinesModule","ColumnsToolPanelModule","FiltersToolPanelModule","MasterDetailModule","MenuModule","RangeSelectionModule","RichSelectModule","RowGroupingModule","SetFilterModule","MultiFilterModule","SideBarModule","StatusBarModule","LicenseManager","setLicenseKey","frame_dtypes","allow_unsafe_jscode","fit_columns_on_grid_load","websocket_connection_string","row_id_col","JSON","parse","row_data","gridHeight","height","initialiseValuesRequiredForConditionalFormatting","columnTypes","dateColumnFilter","filter","filterParams","comparator","filterValue","cellValue","compareAsc","parseISO","numberColumnFilter","shortDateTimeFormat","valueFormatter","params","dateFormatter","customDateTimeFormat","column","colDef","custom_format_string","customNumericFormat","numberFormatter","precision","volatilityFormatter","currencyFormatter","custom_currency_symbol","timedeltaFormat","duration","humanize","cellStyle","conditionalFormattingCellStyle","assign","warn","getRowId","data","columnDefFieldForConditionalFormatting","columnDefs","x","includes","field","forEach","uniquValues","this","sort","a","b","number","valueIndex","backgroundColor","colorStart","colorEnd","colorCount","rgb","start","end","len","alpha","saida","generateColor","length","v","JS_PLACEHOLDER","match","RegExp","exec","funcStr","Function","updateEvents","update_on","doReturn","element","addEventListener","debounce","columnsState","columns_state","applyColumnState","applyOrder","event","idx","forEachDetailGridInfo","attachUpdateEvents","fitColumns","selectIndex","wsUpdate","WebSocket","onmessage","applyTransactionAsync","update","sizeColumnsToFit","autoSizeAllColumns","isoString","formaterString","date","format","currencySymbol","n","Number","parseFloat","toFixed","replace","returnData","data_return_mode","forEachLeafNode","row","forEachNodeAfterFilter","group","forEachNodeAfterFilterAndSort","selected","d","id","forEachNode","isSelected","returnValue","originalDtypes","selectedRows","getSelectedRows","selectedItems","getSelectedNodes","rowIndex","colState","getColumnState","Streamlit","setComponentValue","width","reload_data","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4d08b3a8.chunk.js","sourcesContent":["// stole from https://github.com/andfanilo/streamlit-echarts/blob/master/streamlit_echarts/frontend/src/utils.js Thanks andfanilo\nfunction mapObject(obj, fn) {\n    return Object.keys(obj).reduce((res, key) => {\n        res[key] = fn(obj[key])\n        return res\n    }, {})\n}\n\nfunction deepMap(obj, fn) {\n    const deepMapper = (val) =>\n        val !== null && typeof val === \"object\" ? deepMap(val, fn) : fn(val)\n    if (Array.isArray(obj)) {\n        return obj.map(deepMapper)\n    }\n    if (typeof obj === \"object\") {\n        return mapObject(obj, deepMapper)\n    }\n    return obj\n}\n\nexport default deepMap\n","import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\n\r\nimport { ReactNode } from \"react\"\r\n\r\nimport { AgGridReact } from \"@ag-grid-community/react\"\r\n\r\nimport { ModuleRegistry, ColumnApi, GridApi, DetailGridInfo,GetRowIdParams } from \"@ag-grid-community/core\"\r\n\r\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\"\r\nimport { LicenseManager } from \"@ag-grid-enterprise/core\"\r\nimport { GridChartsModule } from \"@ag-grid-enterprise/charts\"\r\nimport { SparklinesModule } from \"@ag-grid-enterprise/sparklines\"\r\nimport { ColumnsToolPanelModule } from \"@ag-grid-enterprise/column-tool-panel\"\r\nimport { ExcelExportModule } from \"@ag-grid-enterprise/excel-export\"\r\nimport { FiltersToolPanelModule } from \"@ag-grid-enterprise/filter-tool-panel\"\r\nimport { MasterDetailModule } from \"@ag-grid-enterprise/master-detail\"\r\nimport { MenuModule } from \"@ag-grid-enterprise/menu\"\r\nimport { RangeSelectionModule } from \"@ag-grid-enterprise/range-selection\"\r\nimport { RichSelectModule } from \"@ag-grid-enterprise/rich-select\"\r\nimport { RowGroupingModule } from \"@ag-grid-enterprise/row-grouping\"\r\nimport { SetFilterModule } from \"@ag-grid-enterprise/set-filter\"\r\nimport { MultiFilterModule } from \"@ag-grid-enterprise/multi-filter\"\r\nimport { SideBarModule } from \"@ag-grid-enterprise/side-bar\"\r\nimport { StatusBarModule } from \"@ag-grid-enterprise/status-bar\"\r\n\r\nimport { parseISO, compareAsc } from \"date-fns\"\r\nimport { format } from \"date-fns-tz\"\r\nimport deepMap from \"./utils\"\r\nimport { duration } from \"moment\"\r\n\r\nimport { debounce } from \"lodash\"\r\n\r\nimport \"./AgGrid.scss\"\r\nimport \"./scrollbar.css\"\r\ninterface State {\r\n  rowData: any\r\n  gridHeight: number\r\n  should_update: boolean\r\n}\r\n\r\ntype CSSDict = { [key: string]: { [key: string]: string } }\r\n\r\nfunction getCSS(styles: CSSDict): string {\r\n  var css = []\r\n  for (let selector in styles) {\r\n    let style = selector + \" {\"\r\n\r\n    for (let prop in styles[selector]) {\r\n      style += prop + \": \" + styles[selector][prop] + \";\"\r\n    }\r\n\r\n    style += \"}\"\r\n\r\n    css.push(style)\r\n  }\r\n\r\n  return css.join(\"\\n\")\r\n}\r\n\r\nfunction addCustomCSS(custom_css: CSSDict): void {\r\n  var css = getCSS(custom_css)\r\n  var styleSheet = document.createElement(\"style\")\r\n  styleSheet.type = \"text/css\"\r\n  styleSheet.innerText = css\r\n  console.log(`Adding cutom css: `, css)\r\n  document.head.appendChild(styleSheet)\r\n}\r\n\r\nfunction hex(c: any) {\r\n  var s = '0123456789abcdef';\r\n  var i = parseInt(c);\r\n  if (isNaN(c) || i === 0) return '00';\r\n  i = Math.round(Math.min(Math.max(0, i), 255));\r\n  return s.charAt((i - (i % 16)) / 16) + s.charAt(i % 16);\r\n}\r\n\r\n/* Convert an RGB triplet to a hex string */\r\nfunction convertToHex(rgb: any) {\r\n  return hex(rgb[0]) + hex(rgb[1]) + hex(rgb[2]);\r\n}\r\n\r\n/* Remove '#' in color hex string */\r\nfunction trim(s: string) {\r\n  return s.charAt(0) === '#' ? s.substring(1, 7) : s;\r\n}\r\n\r\n/* Convert a hex string to an RGB triplet */\r\nfunction convertToRGB(hex: string) {\r\n  var color = [];\r\n  color[0] = parseInt(trim(hex).substring(0, 2), 16);\r\n  color[1] = parseInt(trim(hex).substring(2, 4), 16);\r\n  color[2] = parseInt(trim(hex).substring(4, 6), 16);\r\n  return color;\r\n}\r\n\r\nfunction generateColor(colorStart: string, colorEnd: string, colorCount: number, index: number) {\r\n  // The beginning of your gradient\r\n  var start = convertToRGB(colorStart);\r\n\r\n  // The end of your gradient\r\n  var end = convertToRGB(colorEnd);\r\n\r\n  // The number of colors to compute\r\n  var len = colorCount;\r\n\r\n  //Alpha blending amount\r\n  var alpha = 0.0;\r\n\r\n  var saida = [];\r\n\r\n  let i;\r\n  for (i = 0; i < len; i++) {\r\n    var c = [];\r\n    alpha += 1.0 / len;\r\n\r\n    c[0] = start[0] * alpha + (1 - alpha) * end[0];\r\n    c[1] = start[1] * alpha + (1 - alpha) * end[1];\r\n    c[2] = start[2] * alpha + (1 - alpha) * end[2];\r\n\r\n    saida.push(convertToHex(c));\r\n  }\r\n\r\n  return saida[index];\r\n}\r\n\r\nfunction onlyUnique(value: any, index: any, self: any) {\r\n  if (value !== 'nan') {\r\n    return self.indexOf(value) === index;\r\n  }\r\n}\r\n\r\n\r\nclass AgGrid extends StreamlitComponentBase<State> {\r\n  private frameDtypes: any\r\n  private api!: GridApi\r\n  private columnApi!: ColumnApi\r\n  private columnFormaters: any\r\n  private manualUpdateRequested: boolean = false\r\n  private allowUnsafeJsCode: boolean = false\r\n  private fitColumnsOnGridLoad: boolean = false\r\n  private gridOptions: any\r\n  private gradientLowValueColour = '#FF0000'\r\n  private gradientHighValueColour = '#00FF00'\r\n  private allValuesInTable: number[] = []\r\n  private valuesForTableOrdered: number[] = []\r\n  private wsUrl:string\r\n  private rowIdCol:string\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n    ModuleRegistry.register(ClientSideRowModelModule)\r\n\r\n    if (props.args.custom_css) {\r\n      addCustomCSS(props.args.custom_css)\r\n    }\r\n\r\n    if (props.args.enable_enterprise_modules) {\r\n      ModuleRegistry.registerModules([\r\n        ExcelExportModule,\r\n        GridChartsModule,\r\n        SparklinesModule,\r\n        ColumnsToolPanelModule,\r\n        FiltersToolPanelModule,\r\n        MasterDetailModule,\r\n        MenuModule,\r\n        RangeSelectionModule,\r\n        RichSelectModule,\r\n        RowGroupingModule,\r\n        SetFilterModule,\r\n        MultiFilterModule,\r\n        SideBarModule,\r\n        StatusBarModule,\r\n      ])\r\n      if (\"license_key\" in props.args) {\r\n        LicenseManager.setLicenseKey(props.args[\"license_key\"])\r\n      }\r\n    }\r\n\r\n    this.frameDtypes = this.props.args.frame_dtypes\r\n    this.manualUpdateRequested = this.props.args.manual_update === 1\r\n    this.allowUnsafeJsCode = this.props.args.allow_unsafe_jscode\r\n    this.fitColumnsOnGridLoad = this.props.args.fit_columns_on_grid_load\r\n    this.wsUrl=this.props.args.websocket_connection_string\r\n    this.rowIdCol=this.props.args.row_id_col\r\n\r\n    this.state = {\r\n      rowData: JSON.parse(props.args.row_data),\r\n      gridHeight: this.props.args.height,\r\n      should_update: false,\r\n    }\r\n\r\n    this.initialiseValuesRequiredForConditionalFormatting(this.props.args.gridOptions, this.state.rowData)\r\n\r\n    this.columnFormaters = {\r\n      columnTypes: {\r\n        dateColumnFilter: {\r\n          filter: \"agDateColumnFilter\",\r\n          filterParams: {\r\n            comparator: (filterValue: any, cellValue: string) =>\r\n              compareAsc(parseISO(cellValue), filterValue),\r\n          },\r\n        },\r\n        numberColumnFilter: {\r\n          filter: \"agNumberColumnFilter\",\r\n        },\r\n        shortDateTimeFormat: {\r\n          valueFormatter: (params: any) =>\r\n            this.dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n        },\r\n        'customDateFormat': {\r\n          valueFormatter: (params: any) =>\r\n              this.dateFormatter(params.value, \"yyyy-MM-dd\"),\r\n        },\r\n        customDateTimeFormat: {\r\n          valueFormatter: (params: any) =>\r\n            this.dateFormatter(\r\n              params.value,\r\n              params.column.colDef.custom_format_string\r\n            ),\r\n        },\r\n        customNumericFormat: {\r\n          valueFormatter: (params: any) =>\r\n            this.numberFormatter(\r\n              params.value,\r\n              params.column.colDef.precision ?? 2\r\n            ),\r\n        },\r\n        'customVolatilityFormat': {\r\n          valueFormatter: (params: any) => this.volatilityFormatter(params.value, params.column.colDef.precision ?? 1),\r\n        },\r\n        'customCurrencyFormat': {\r\n          valueFormatter: (params: any) =>\r\n              this.currencyFormatter(\r\n                  params.value,\r\n                  params.column.colDef.custom_currency_symbol ?? '$',\r\n                  params.column.colDef.precision ?? 0\r\n              ),\r\n        },\r\n        timedeltaFormat: {\r\n          valueFormatter: (params: any) =>\r\n            duration(params.value).humanize(true),\r\n        },\r\n        'conditionalFormat': {\r\n          cellStyle: (params: any) => this.conditionalFormattingCellStyle(params.value, this.valuesForTableOrdered)\r\n        },\r\n      }\r\n    }\r\n\r\n    let gridOptions = Object.assign(\r\n      {},\r\n      this.columnFormaters,\r\n      this.props.args.gridOptions\r\n    )\r\n\r\n    if (this.allowUnsafeJsCode) {\r\n      console.warn(\"flag allow_unsafe_jscode is on.\")\r\n      gridOptions = this.convertJavascriptCodeOnGridOptions(gridOptions)\r\n    }\r\n    if (this.rowIdCol !== undefined) {\r\n      gridOptions.getRowId= (params: GetRowIdParams) => {\r\n        // console.log(this.rowIdCol)\r\n        // console.log(params.data)\r\n        // console.log(params.data[this.rowIdCol])\r\n        // console.log(params.data.ExpirationDate)\r\n        return params.data[this.rowIdCol];\r\n      }\r\n\r\n    }\r\n    this.gridOptions = gridOptions\r\n  }\r\n\r\n\r\n  private initialiseValuesRequiredForConditionalFormatting(gridOptions: any, rowData: any) {\r\n    const columnDefs = gridOptions.columnDefs;\r\n    // console.log(columnDefs)\r\n    const columnDefFieldForConditionalFormatting = columnDefs\r\n        // .filter((x:any) => x.cellStyle?.name === 'conditionalFormattingCellStyle')\r\n        // .filter((x:any) =>  x.conditional_formatting_group === 'group1')\r\n        .filter((x: any) => x.type.includes('conditionalFormat'))\r\n        .map((x: any) => {\r\n          if (x.field) {\r\n            return x.field;\r\n          }\r\n        });\r\n    // console.log(columnDefFieldForConditionalFormatting)\r\n    rowData.forEach((x: any) => {\r\n      columnDefFieldForConditionalFormatting.forEach((field: any) => {\r\n        this.allValuesInTable.push(x[field]);\r\n      })\r\n    });\r\n    // console.log(this.allValuesInTable)\r\n    // const uniquValues = [...new Set(this.allValuesInTable)];\r\n    const uniquValues = this.allValuesInTable.filter(onlyUnique)//.filter((x:any)=>x!=='nan');\r\n\r\n    this.valuesForTableOrdered = uniquValues.sort(function (a, b) {\r\n      return a - b;\r\n    });\r\n    // console.log(this.valuesForTableOrdered)\r\n  }\r\n\r\n  private conditionalFormattingCellStyle(number: any, valuesForTableOrdered: any) {\r\n    // the index, or how far along the value is in the gradient\r\n    const valueIndex = valuesForTableOrdered.indexOf(number);\r\n    // get the colour for the cell, depending on its index\r\n    const bgColour = generateColor(\r\n        this.gradientHighValueColour,\r\n        this.gradientLowValueColour,\r\n        this.valuesForTableOrdered.length,\r\n        valueIndex\r\n    );\r\n\r\n    return {backgroundColor: '#' + bgColour};\r\n  }\r\n\r\n  static getDerivedStateFromProps(props: any, state: any) {\r\n    if (props.args.reload_data) {\r\n      let new_row_data = JSON.parse(props.args.row_data)\r\n\r\n      return {\r\n        rowData: new_row_data,\r\n        gridHeight: props.args.height,\r\n        should_update: true,\r\n      }\r\n    } else {\r\n      return {\r\n        gridHeight: props.args.height,\r\n      }\r\n    }\r\n  }\r\n\r\n  private convertStringToFunction(v: string) {\r\n    const JS_PLACEHOLDER = \"--x_x--0_0--\"\r\n\r\n    let funcReg = new RegExp(\r\n      `${JS_PLACEHOLDER}\\\\s*((function|class)\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\r\n    )\r\n\r\n    let match = funcReg.exec(v)\r\n\r\n    if (match) {\r\n      const funcStr = match[1]\r\n      // eslint-disable-next-line\r\n      return new Function(\"return \" + funcStr)()\r\n    } else {\r\n      return v\r\n    }\r\n  }\r\n\r\n  private convertJavascriptCodeOnGridOptions = (obj: object) => {\r\n    return deepMap(obj, this.convertStringToFunction)\r\n  }\r\n\r\n  private attachUpdateEvents(api: GridApi) {\r\n    let updateEvents = this.props.args.update_on[0]\r\n    const doReturn = (e: any) => this.returnGridValue(e)\r\n\r\n    updateEvents.forEach((element: any) => {\r\n      if (Array.isArray(element)) {\r\n        api.addEventListener(element[0], debounce(doReturn, element[1]))\r\n        console.log(\"Attached arr\", element)\r\n      } else {\r\n        api.addEventListener(element, doReturn)\r\n      }\r\n    })\r\n  }\r\n\r\n  private loadColumnsState() {\r\n    const columnsState = this.props.args.columns_state\r\n\r\n    if (columnsState != null) {\r\n      //console.dir(columnsState)\r\n      this.columnApi.applyColumnState({ state: columnsState, applyOrder: true})\r\n    }\r\n  }\r\n\r\n  private onGridReady(event: any) {\r\n    this.api = event.api\r\n    this.columnApi = event.columnApi\r\n\r\n    this.api.forEachDetailGridInfo((i: any) => {\r\n      console.log(i)\r\n    })\r\n\r\n    this.attachUpdateEvents(this.api)\r\n\r\n    this.api.forEachDetailGridInfo((i: DetailGridInfo) => {\r\n      //console.log(i)\r\n      if (i.api !== undefined) {\r\n      this.attachUpdateEvents(i.api)\r\n      }\r\n    })\r\n\r\n    this.api.addEventListener(\"firstDataRendered\", (e: any) =>\r\n      this.fitColumns()\r\n    )\r\n\r\n    this.api.setRowData(this.state.rowData)\r\n\r\n    for (var idx in this.gridOptions[\"preSelectedRows\"]) {\r\n      this.api.selectIndex(this.gridOptions[\"preSelectedRows\"][idx], true, true)\r\n    }\r\n    // console.log(this.state.rowData)\r\n    this.wsUpdate(this.api)\r\n\r\n  }\r\n\r\n  private wsUpdate(api:any) {\r\n    if (this.wsUrl !== undefined) {\r\n      let ws = new WebSocket(this.wsUrl);\r\n      ws.onmessage = function (event) {\r\n        let data = JSON.parse(event.data)\r\n        // console.log(data)\r\n        api.applyTransactionAsync({update: data})\r\n      }\r\n    }\r\n  }\r\n\r\n  private fitColumns() {\r\n    if (this.fitColumnsOnGridLoad) {\r\n      this.api.sizeColumnsToFit()\r\n    } else {\r\n      this.columnApi.autoSizeAllColumns()\r\n    }\r\n  }\r\n\r\n  private dateFormatter(isoString: string, formaterString: string): String {\r\n    try {\r\n      let date = parseISO(isoString)\r\n      return format(date, formaterString)\r\n    } catch {\r\n      return isoString\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  private currencyFormatter(number: any, currencySymbol: string, precision: number = 0): String {\r\n    let n = Number.parseFloat(number)\r\n    if (!Number.isNaN(n)) {\r\n      return currencySymbol + n.toFixed(precision).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n    } else {\r\n      return number\r\n    }\r\n  }\r\n\r\n  private numberFormatter(number: any, precision: number): String {\r\n    let n = Number.parseFloat(number)\r\n    if (!Number.isNaN(n)) {\r\n      return n.toFixed(precision)\r\n    } else {\r\n      return number\r\n    }\r\n  }\r\n\r\n  private volatilityFormatter(number: any, precision: number): String {\r\n    let n = Number.parseFloat(number)\r\n    if (!Number.isNaN(n)) {\r\n      return (n * 100).toFixed(precision) + '%'\r\n    } else {\r\n      return number\r\n    }\r\n  }\r\n\r\n  private returnGridValue(e: any) {\r\n    let returnData: any[] = []\r\n    let returnMode = this.props.args.data_return_mode\r\n\r\n    switch (returnMode) {\r\n      case 0: //ALL_DATA\r\n        this.api.forEachLeafNode((row) => returnData.push(row.data))\r\n        break\r\n\r\n      case 1: //FILTERED_DATA\r\n        this.api.forEachNodeAfterFilter((row) => {\r\n          if (!row.group) {\r\n            returnData.push(row.data)\r\n          }\r\n        })\r\n        break\r\n\r\n      case 2: //FILTERED_SORTED_DATA\r\n        this.api.forEachNodeAfterFilterAndSort((row) => {\r\n          if (!row.group) {\r\n            returnData.push(row.data)\r\n          }\r\n        })\r\n        break\r\n    }\r\n\r\n      let selected : any  = {}\r\n      this.api.forEachDetailGridInfo((d:DetailGridInfo) => {\r\n        selected[d.id] = []\r\n        d.api?.forEachNode((n: any) => {\r\n          if (n.isSelected()) {\r\n            selected[d.id].push(n)\r\n          }\r\n        })\r\n      })\r\n\r\n    //console.log(selected)\r\n    let returnValue = {\r\n      originalDtypes: this.frameDtypes,\r\n      rowData: returnData,\r\n      selectedRows: this.api.getSelectedRows(),\r\n      selectedItems: this.api\r\n        .getSelectedNodes()\r\n        .map((n) => ({ rowIndex: n.rowIndex, ...n.data })),\r\n      colState: this.columnApi.getColumnState(),\r\n    }\r\n\r\n    Streamlit.setComponentValue(returnValue)\r\n  }\r\n\r\n  private ManualUpdateButton(props: any) {\r\n    if (props.manual_update) {\r\n      return <button onClick={props.onClick}>Update</button>\r\n    } else {\r\n      return <span></span>\r\n    }\r\n  }\r\n\r\n  private defineContainerHeight() {\r\n    if (\"domLayout\" in this.gridOptions) {\r\n      if (this.gridOptions[\"domLayout\"] === \"autoHeight\") {\r\n        return {\r\n          width: this.props.width,\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      width: this.props.width,\r\n      height: this.state.gridHeight,\r\n    }\r\n  }\r\n\r\n  public render = (): ReactNode => {\r\n    if (this.api !== undefined) {\r\n      if (this.state.should_update) {\r\n        this.api.setRowData(this.state.rowData)\r\n      }\r\n    }\r\n    this.loadColumnsState()\r\n    \r\n\r\n    return (\r\n      <div\r\n        className={\"ag-theme-\" + this.props.args.theme}\r\n        style={this.defineContainerHeight()}\r\n      >\r\n        <this.ManualUpdateButton\r\n          manual_update={this.manualUpdateRequested}\r\n          onClick={(e: any) => this.returnGridValue(e)}\r\n        />\r\n        <AgGridReact\r\n          onGridReady={(e) => this.onGridReady(e)}\r\n          gridOptions={this.gridOptions}\r\n        ></AgGridReact>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(AgGrid)\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AgGrid from \"./AgGrid\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AgGrid />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}